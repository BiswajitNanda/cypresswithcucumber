/**
 * Simple script to exercise the appleconnect-system REST module
 */
var assert = require('assert');
var appleConnSys = require('../index');

function checkIsUnSet(variable, envName) {
    if (!variable) {
        console.warn('environment variable or PIE/RIO secret '+ envName +' not defined');
        return true;
    }
    return false;
}

describe('Tests the REST interface', function() {
    this.timeout(8000);
    var environment = 'PROD';
    var secretFile = 'secrets/shared_secret';
    var secretTOTPkey = appleConnSys.getSecret('AUTH_SYSTOTP_KEY');
    var systemUserName = appleConnSys.getSecret('AUTH_SYSUSER');
    var systemPassword = appleConnSys.getSecret('AUTH_SYSPASS');
    var appIdKey = appleConnSys.getSecret('AUTH_APPID_KEY');
    var appId = appleConnSys.getSecret('AUTH_APPID');
    var appPassword = appleConnSys.getSecret('AUTH_APP_PASS');

    // check all the variables
    var untestable = false;
    untestable |= checkIsUnSet(secretTOTPkey, 'AUTH_SYSTTOTP_KEY');
    untestable |= checkIsUnSet(systemUserName, 'AUTH_SYSUSER');
    untestable |= checkIsUnSet(systemPassword, 'AUTH_SYSPASS');
    untestable |= checkIsUnSet(appIdKey, 'AUTH_APPID_KEY');
    untestable |= checkIsUnSet(appId, 'AUTH_APPID');
    untestable |= checkIsUnSet(appPassword, 'AUTH_APP_PASS');

    if (untestable) {
        throw new Error('Cannot run test because of missing configuration');
    }

    it('Checks getDAW with appIdKey & secret file', function (done) {
        var properties = {
            environment: environment,
            secretFile: secretFile,
            systemUserName: systemUserName,
            systemPassword: systemPassword,
            appIdKey: appIdKey
        };
        var re = new appleConnSys.REST(properties);
        re.getDAW(function(e, r) {
            console.log(environment, 'With appIdKey', e, r);
            assert.ifError(e);
            re.getUserSession(function(e, r) {
                console.log('Session with appIdKey', e, r);
                assert.ifError(e);
                done();
            });
        });
    });

    it('Checks getDAW app id & app password & secret file', function (done) {
        var properties = {
            environment: environment,
            secretFile: secretFile,
            systemUserName: systemUserName,
            systemPassword: systemPassword,
            appId: appId,
            appPassword: appPassword
        };
        var re = new appleConnSys.REST(properties);
        re.getDAW(function(e, r) {
            console.log(environment, 'With AppId', e, r);
            assert.ifError(e);
            re.getUserSession(function (e, r) {
                console.log('With appId and password', e, r);
                assert.ifError(e);
                done();
            });
        })
    });

    it('Checks getDAW with appIdKey & secret key', function (done) {
        var properties = {
            environment: environment,
            secretTOTPkey: secretTOTPkey,
            systemUserName: systemUserName,
            systemPassword: systemPassword,
            appIdKey: appIdKey
        };
        var re = new appleConnSys.REST(properties);
        re.getDAW(function(e, r) {
            console.log(environment, 'With appIdKey', e, r);
            assert.ifError(e);
            re.getUserSession(function(e, r) {
                console.log('Session with appIdKey', e, r);
                assert.ifError(e);
                done();
            });
        });
    });

    it('Checks getDAW app id & app password & secret key', function (done) {
        var properties = {
            environment: environment,
            secretTOTPkey: secretTOTPkey,
            systemUserName: systemUserName,
            systemPassword: systemPassword,
            appId: appId,
            appPassword: appPassword
        };
        var re = new appleConnSys.REST(properties);
        re.getDAW(function(e, r) {
            console.log(environment, 'With AppId', e, r);
            assert.ifError(e);
            re.getUserSession(function (e, r) {
                console.log('With appId and password', e, r);
                assert.ifError(e);
                done();
            });
        })
    });
});

