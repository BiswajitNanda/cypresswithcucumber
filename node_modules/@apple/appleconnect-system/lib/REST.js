/**
 * Methods to retrieve DAW token or userSession from IdMS REST API'''
 */
var request = require('request');
var Totp = require('./totp');

var PROD = 'PROD';
var UAT = 'UAT';

var URLS = {
    PROD: 'https://idms-int-rsvc.corp.apple.com/service/authservice/authenticate',
    UAT: 'https://idms-int-rsvc-uat.corp.apple.com/service/authservice/authenticate'
};

// for debugging
// PROXIES = {'https': 'http://localhost:8080'}
var PROXIES = {};

/**
 * Methods to retrieve DAW token or userSession from IdMS REST API
 * Implements a REST client, using underlying TOTP code from earlier development
 * Example usage:
 * var REST = require('REST');
 * re = REST(environment='PROD', secretFile='filename',
 *          systemUserName='myuser', systemPassword='mypassword',
 *          appIdKey='long appIdKey string')
 * console.log(re.getDAW());
 * console.log(re.getuserSession())
 *
 * re = REST(environment='PROD', secretFile='filename',
 *          systemUserName='myuser', systemPassword='mypassword',
 *          appId='appId number', appPassword='app passsword')
 * console.log(re.getDAW())
 * console.log(re.getuserSession())
 */
function REST(options) {
    this.deviceId = options.deviceId || '1';
    this.environment = options.environment || UAT;
    this.authurl = URLS[this.environment];
    this.secretFile = options.secretFile;
    this.secretTOTPkey = options.secretTOTPkey;
    this.systemUserName = options.systemUserName;
    this.systemPassword = options.systemPassword;
    this.appId = options.appId;
    this.appIdKey = options.appIdKey;
    this.appPassword = options.appPassword;

    /**
     * Calls the REST api of the IDMS authentiate service
     * @param reqParams
     * @param cb
     * @constructor
     */
    this.IDMSAuth = function (reqParams, cb) {
        // console.log('Params', reqParams);
        request(reqParams, function (e, res) {
            // console.log('Error', e, 'Status', e?'':res.statusCode, 'Body', e?'':res.body);
            if (!e && res.statusCode === 200) {
                return cb(null, res.body);
            }
            return cb(e || res.body);
        });
    }

}

REST.prototype.getRequestsSession = function() {
    var dawtoken = this.getDAW();
    var cookiename = {PROD: 'acack', UAT: 'acack-uat'};
    var myCookie = request.cookies.create_cookie(cookiename[this.environment], dawtoken, domain = '.apple.com', secure = true, expires = true)
    var r = request.sessions.Session();
    r.cookies.set_cookie(myCookie);
    return r
};

function getToken(dawResponse, cb) {
    var token;
    try {
        token = dawResponse.dawauthInfo.dawtoken;
        return cb(null, token);
    } catch (e) {
        console.error(e.message);
        return cb(new Error('Error: ' + JSON.stringify(dawResponse.dsresponse.allExceptions)));
    }
}
/**
 Returns a string containing a DAW token, or null if it couldn't
 */
REST.prototype.getDAW = function(cb) {
    if (this.appIdKey) {
        this.func = this.getByAppIdKey;
    } else {
        this.func = this.getByAppPassword;
    }
    this.func(function (e, j) {
        if (e) {
            return cb(e);
        }
        getToken(j, cb);
    });
};

/**
 * Returns a string containing a user session, or null if it couldn't
 */
REST.prototype.getUserSession = function(cb) {
    if (this.appIdKey) {
        return this.getByAppIdKey(function (e, j) {
            return cb(e, j['session']['userSession']);
        })
    } else {
        return this.getByAppPassword(function (e, j) {
            return cb(e, j['session']['userSession']);
        })
    }
 };

/**
 *
 * @param appCredentials {object} containing either appId and appPassword or appIdKey
 * @returns {{headers: *, method: string, json: boolean, body: *, uri: *}}
 */
REST.prototype.createAppRequest = function(appCredentials) {
    var totp_obj = new Totp(this.secretFile, this.secretTOTPkey, true);
    var headers = {'Content-Type': 'application/json'};
    // add the headers appropriate to the usage (using appID or appPassword)
    Object.keys(appCredentials).forEach( function (aKey) {
        if (aKey === 'appID') {
            headers['appId'] = appCredentials[aKey];
        } else if (aKey === 'appPassword') {
            headers['appPwd'] = appCredentials[aKey];
        } else {
            headers[aKey] = appCredentials[aKey];
        }
     });

    var secCode = totp_obj.get_hotp();
    // console.log('User', this.systemUserName, 'Env', this.environment, 'TOTP', secCode);
    var payload = {
        secondFactor: {
            secCode: secCode,
            deviceId: this.deviceId
        },
        dsRequest: {
            languageCd: 'US-EN',
            appCredentials: appCredentials
        },
        account: {
            accountName: this.systemUserName,
            password: this.systemPassword
        },
        personFetchPrefs: {
            fetchAccount: false,
            fetchCoreInfo: false
        },
        generateDAWToken: true
    };
    var reqParams = {
        uri: this.authurl,
        headers: headers,
        body: payload,
        json: true,
        method: 'POST'
    };
    return reqParams;
};

/**
 * Calls IdMS REST API using appId/appPassword for authentication
 */
REST.prototype.getByAppPassword = function(cb) {
    var appCredentials = {
        appID: this.appId,
        appPassword: this.appPassword
    };
    var reqParams = this.createAppRequest(appCredentials);
    this.IDMSAuth(reqParams, cb);
};

/**
 * Calls IdMS REST API using appIdKey for authentication
 */
REST.prototype.getByAppIdKey = function(cb) {
    var appCredentials = {
        appIdKey: this.appIdKey
    };
    var reqParams = this.createAppRequest(appCredentials);
    this.IDMSAuth(reqParams, cb);
};

module.exports = REST;
