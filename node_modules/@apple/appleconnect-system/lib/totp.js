var otp = require('otpauth');
var fs = require('fs');

/**
 * Creates a TOTP version
 * @param sharedSecretFile
 * @param otpSecretKey
 * @param steps_since_epoch
 * @constructor
 */
function Totp(sharedSecretFile, otpSecretKey, steps_since_epoch) {
  this.readFromFile = function(filename) {
    var contents = fs.readFileSync(filename, 'utf8');
    return contents.trim();
    // return contents.replace(/(\n|\r)+$/, '');
  };
  if (sharedSecretFile && otpSecretKey) {
    throw new Error('cannot have secret from file and as parameter');
  }
  if (sharedSecretFile) {
    this.OTPSecretKey = this.readFromFile(sharedSecretFile);
  } else if (otpSecretKey) {
    this.OTPSecretKey = otpSecretKey;
  } else {
    throw new Error('must have either file or secret as parameter');
  }
  this.steps_since_epoch = steps_since_epoch;
}

/**
 *
 * @returns {string|number}
 */
Totp.prototype.get_hotp = function() {
  var my_otp = new otp.TOTP({
    algorithm: 'SHA1',
    digits: 6,
    period: 30,
    secret: otp.Secret.fromB32(this.OTPSecretKey.toUpperCase())
  });

  return my_otp.generate();
};

module.exports = Totp;

